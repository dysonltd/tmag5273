---
    name: Linting
    
    on: # yamllint disable-line rule:truthy
      # push: null
      pull_request: null
    
    permissions: {issues: write, pull-requests: write}
    
    jobs:
      super_linter_check:
        name: Super Linter (Check)
        runs-on: ubuntu-latest
    
        permissions:
          contents: read
          packages: read
          # To report GitHub Actions status checks
          statuses: write
    
        steps:
          - name: Checkout code
            uses: actions/checkout@v4
            with:
              # super-linter needs the full git history to get the
              # list of files that changed across commits
              fetch-depth: 0
    
          - name: Super-linter
            uses: oxsecurity/megalinter@v8 # x-release-please-version
            env:
              # Linters
              VALIDATE_NATURAL_LANGUAGE: true
              VALIDATE_MARKDOWN: true
              MARKDOWN_CUSTOM_RULE_GLOBS: '**/*.md'
              # VALIDATE_RUST_CLIPPY: true # Cant Use as the version is not at 1.81 yet in the linter
              VALIDATE_JSON: true
              VALIDATE_YAML: true
              VALIDATE_GITHUB_ACTIONS: true
              # Output Settings
              SAVE_SUPER_LINTER_SUMMARY: true
              ENABLE_GITHUB_ACTIONS_STEP_SUMMARY: true
              MULTI_STATUS: true
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      super_linter_fix:
        name: Super Linter (Fix)
        permissions:
        # To write linting fixes
          contents: write
          # To write Super-linter status checks
          statuses: write
        runs-on: ubuntu-latest
        steps:
          - uses: actions/checkout@v4
            with:
              fetch-depth: 0
          - name: Super-Linter
            uses: oxsecurity/megalinter@v8 # x-release-please-version
            env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              # Set your fix mode variables to true
              FIX_MARKDOWN: true
              FIX_JSON: true
              # To reuse the same Super-linter configuration that you use in the
              # lint job without duplicating it, see
              # https://github.com/super-linter/super-linter/blob/main/docs/run-linter-locally.md#share-environment-variables-between-environments
          - name: Commit and push linting fixes
            # Run only on:
            # - Pull requests
            # - Not on the default branch
            if: >
              github.event_name == 'pull_request' &&
              github.ref_name != github.event.repository.default_branch
            uses: stefanzweifel/git-auto-commit-action@v5
            with:
              branch: ${{ github.event.pull_request.head.ref || github.head_ref || github.ref }}
              commit_message: "chore: fix linting issues"
              commit_user_name: super-linter
              commit_user_email: super-linter@super-linter.dev

      # Remove this section when Super Linter is updated (https://github.com/dysonltd/tmag5273/issues/3)
      Clippy:
        name: Clippy
        runs-on: ubuntu-latest
        steps:
          - name: Checkout code
            uses: actions/checkout@v4
          - name: Clippy check on src
            run: cargo clippy --manifest-path Cargo.toml -- -D warnings
          - name: Clippy check on utils
            run: cargo clippy --manifest-path utils/Cargo.toml -- -D warnings
          - name: Clippy check on esp32 example
            run:  |
                  cd examples/esp32-c3
                  cargo clippy --manifest-path ./Cargo.toml -- -D warnings
                  # Had to run in the esp32c3 directory to get rid of <https://github.com/taiki-e/portable-atomic/issues/148>
                  
      Formatter:
        name: Cargo Formatter
        runs-on: ubuntu-latest
        steps:
          - name: Checkout code
            uses: actions/checkout@v4
          - name: Rustfmt check on src
            run: cargo fmt --manifest-path Cargo.toml -- --check
          - name: Rustfmt check on utils
            run: cargo fmt --manifest-path utils/Cargo.toml -- --check
          - name: Rustfmt check on esp32 example
            run: cargo fmt --manifest-path examples/esp32-c3/Cargo.toml -- --check
    